# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Grpcs.GrpcBase.textFilter_pb2 as textFilter__pb2


class TextFilterGrpcStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TextFilter = channel.unary_unary(
                '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/TextFilter',
                request_serializer=textFilter__pb2.TextFindAllGrpcRequest.SerializeToString,
                response_deserializer=textFilter__pb2.TextFindAllGrpcReply.FromString,
                )
        self.JsonFilter = channel.unary_unary(
                '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/JsonFilter',
                request_serializer=textFilter__pb2.TextFindAllGrpcRequest.SerializeToString,
                response_deserializer=textFilter__pb2.TextFindAllGrpcReply.FromString,
                )
        self.HtmlFilter = channel.unary_unary(
                '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/HtmlFilter',
                request_serializer=textFilter__pb2.TextFindAllGrpcRequest.SerializeToString,
                response_deserializer=textFilter__pb2.TextFindAllGrpcReply.FromString,
                )
        self.MarkdownFilter = channel.unary_unary(
                '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/MarkdownFilter',
                request_serializer=textFilter__pb2.TextFindAllGrpcRequest.SerializeToString,
                response_deserializer=textFilter__pb2.TextFindAllGrpcReply.FromString,
                )
        self.TextReplace = channel.unary_unary(
                '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/TextReplace',
                request_serializer=textFilter__pb2.TextReplaceGrpcRequest.SerializeToString,
                response_deserializer=textFilter__pb2.TextReplaceGrpcReply.FromString,
                )
        self.JsonReplace = channel.unary_unary(
                '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/JsonReplace',
                request_serializer=textFilter__pb2.TextReplaceGrpcRequest.SerializeToString,
                response_deserializer=textFilter__pb2.TextReplaceGrpcReply.FromString,
                )
        self.HtmlReplace = channel.unary_unary(
                '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/HtmlReplace',
                request_serializer=textFilter__pb2.TextReplaceGrpcRequest.SerializeToString,
                response_deserializer=textFilter__pb2.TextReplaceGrpcReply.FromString,
                )
        self.MarkdownReplace = channel.unary_unary(
                '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/MarkdownReplace',
                request_serializer=textFilter__pb2.TextReplaceGrpcRequest.SerializeToString,
                response_deserializer=textFilter__pb2.TextReplaceGrpcReply.FromString,
                )
        self.TextFilterAsync = channel.unary_unary(
                '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/TextFilterAsync',
                request_serializer=textFilter__pb2.TextFindAllAsyncGrpcRequest.SerializeToString,
                response_deserializer=textFilter__pb2.TextFilterRequestIdGrpcReply.FromString,
                )
        self.JsonFilterAsync = channel.unary_unary(
                '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/JsonFilterAsync',
                request_serializer=textFilter__pb2.TextFindAllAsyncGrpcRequest.SerializeToString,
                response_deserializer=textFilter__pb2.TextFilterRequestIdGrpcReply.FromString,
                )
        self.HtmlFilterAsync = channel.unary_unary(
                '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/HtmlFilterAsync',
                request_serializer=textFilter__pb2.TextFindAllAsyncGrpcRequest.SerializeToString,
                response_deserializer=textFilter__pb2.TextFilterRequestIdGrpcReply.FromString,
                )
        self.MarkdownFilterAsync = channel.unary_unary(
                '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/MarkdownFilterAsync',
                request_serializer=textFilter__pb2.TextFindAllAsyncGrpcRequest.SerializeToString,
                response_deserializer=textFilter__pb2.TextFilterRequestIdGrpcReply.FromString,
                )
        self.TextReplaceAsync = channel.unary_unary(
                '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/TextReplaceAsync',
                request_serializer=textFilter__pb2.TextReplaceAsyncGrpcRequest.SerializeToString,
                response_deserializer=textFilter__pb2.TextFilterRequestIdGrpcReply.FromString,
                )
        self.JsonReplaceAsync = channel.unary_unary(
                '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/JsonReplaceAsync',
                request_serializer=textFilter__pb2.TextReplaceAsyncGrpcRequest.SerializeToString,
                response_deserializer=textFilter__pb2.TextFilterRequestIdGrpcReply.FromString,
                )
        self.HtmlReplaceAsync = channel.unary_unary(
                '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/HtmlReplaceAsync',
                request_serializer=textFilter__pb2.TextReplaceAsyncGrpcRequest.SerializeToString,
                response_deserializer=textFilter__pb2.TextFilterRequestIdGrpcReply.FromString,
                )
        self.MarkdownReplaceAsync = channel.unary_unary(
                '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/MarkdownReplaceAsync',
                request_serializer=textFilter__pb2.TextReplaceAsyncGrpcRequest.SerializeToString,
                response_deserializer=textFilter__pb2.TextFilterRequestIdGrpcReply.FromString,
                )


class TextFilterGrpcServicer(object):
    """The greeting service definition.
    """

    def TextFilter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JsonFilter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HtmlFilter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkdownFilter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TextReplace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JsonReplace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HtmlReplace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkdownReplace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TextFilterAsync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JsonFilterAsync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HtmlFilterAsync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkdownFilterAsync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TextReplaceAsync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JsonReplaceAsync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HtmlReplaceAsync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkdownReplaceAsync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextFilterGrpcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TextFilter': grpc.unary_unary_rpc_method_handler(
                    servicer.TextFilter,
                    request_deserializer=textFilter__pb2.TextFindAllGrpcRequest.FromString,
                    response_serializer=textFilter__pb2.TextFindAllGrpcReply.SerializeToString,
            ),
            'JsonFilter': grpc.unary_unary_rpc_method_handler(
                    servicer.JsonFilter,
                    request_deserializer=textFilter__pb2.TextFindAllGrpcRequest.FromString,
                    response_serializer=textFilter__pb2.TextFindAllGrpcReply.SerializeToString,
            ),
            'HtmlFilter': grpc.unary_unary_rpc_method_handler(
                    servicer.HtmlFilter,
                    request_deserializer=textFilter__pb2.TextFindAllGrpcRequest.FromString,
                    response_serializer=textFilter__pb2.TextFindAllGrpcReply.SerializeToString,
            ),
            'MarkdownFilter': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkdownFilter,
                    request_deserializer=textFilter__pb2.TextFindAllGrpcRequest.FromString,
                    response_serializer=textFilter__pb2.TextFindAllGrpcReply.SerializeToString,
            ),
            'TextReplace': grpc.unary_unary_rpc_method_handler(
                    servicer.TextReplace,
                    request_deserializer=textFilter__pb2.TextReplaceGrpcRequest.FromString,
                    response_serializer=textFilter__pb2.TextReplaceGrpcReply.SerializeToString,
            ),
            'JsonReplace': grpc.unary_unary_rpc_method_handler(
                    servicer.JsonReplace,
                    request_deserializer=textFilter__pb2.TextReplaceGrpcRequest.FromString,
                    response_serializer=textFilter__pb2.TextReplaceGrpcReply.SerializeToString,
            ),
            'HtmlReplace': grpc.unary_unary_rpc_method_handler(
                    servicer.HtmlReplace,
                    request_deserializer=textFilter__pb2.TextReplaceGrpcRequest.FromString,
                    response_serializer=textFilter__pb2.TextReplaceGrpcReply.SerializeToString,
            ),
            'MarkdownReplace': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkdownReplace,
                    request_deserializer=textFilter__pb2.TextReplaceGrpcRequest.FromString,
                    response_serializer=textFilter__pb2.TextReplaceGrpcReply.SerializeToString,
            ),
            'TextFilterAsync': grpc.unary_unary_rpc_method_handler(
                    servicer.TextFilterAsync,
                    request_deserializer=textFilter__pb2.TextFindAllAsyncGrpcRequest.FromString,
                    response_serializer=textFilter__pb2.TextFilterRequestIdGrpcReply.SerializeToString,
            ),
            'JsonFilterAsync': grpc.unary_unary_rpc_method_handler(
                    servicer.JsonFilterAsync,
                    request_deserializer=textFilter__pb2.TextFindAllAsyncGrpcRequest.FromString,
                    response_serializer=textFilter__pb2.TextFilterRequestIdGrpcReply.SerializeToString,
            ),
            'HtmlFilterAsync': grpc.unary_unary_rpc_method_handler(
                    servicer.HtmlFilterAsync,
                    request_deserializer=textFilter__pb2.TextFindAllAsyncGrpcRequest.FromString,
                    response_serializer=textFilter__pb2.TextFilterRequestIdGrpcReply.SerializeToString,
            ),
            'MarkdownFilterAsync': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkdownFilterAsync,
                    request_deserializer=textFilter__pb2.TextFindAllAsyncGrpcRequest.FromString,
                    response_serializer=textFilter__pb2.TextFilterRequestIdGrpcReply.SerializeToString,
            ),
            'TextReplaceAsync': grpc.unary_unary_rpc_method_handler(
                    servicer.TextReplaceAsync,
                    request_deserializer=textFilter__pb2.TextReplaceAsyncGrpcRequest.FromString,
                    response_serializer=textFilter__pb2.TextFilterRequestIdGrpcReply.SerializeToString,
            ),
            'JsonReplaceAsync': grpc.unary_unary_rpc_method_handler(
                    servicer.JsonReplaceAsync,
                    request_deserializer=textFilter__pb2.TextReplaceAsyncGrpcRequest.FromString,
                    response_serializer=textFilter__pb2.TextFilterRequestIdGrpcReply.SerializeToString,
            ),
            'HtmlReplaceAsync': grpc.unary_unary_rpc_method_handler(
                    servicer.HtmlReplaceAsync,
                    request_deserializer=textFilter__pb2.TextReplaceAsyncGrpcRequest.FromString,
                    response_serializer=textFilter__pb2.TextFilterRequestIdGrpcReply.SerializeToString,
            ),
            'MarkdownReplaceAsync': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkdownReplaceAsync,
                    request_deserializer=textFilter__pb2.TextReplaceAsyncGrpcRequest.FromString,
                    response_serializer=textFilter__pb2.TextFilterRequestIdGrpcReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'toolgood.textfilter.api.GrpcBase.TextFilterGrpc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TextFilterGrpc(object):
    """The greeting service definition.
    """

    @staticmethod
    def TextFilter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/TextFilter',
            textFilter__pb2.TextFindAllGrpcRequest.SerializeToString,
            textFilter__pb2.TextFindAllGrpcReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JsonFilter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/JsonFilter',
            textFilter__pb2.TextFindAllGrpcRequest.SerializeToString,
            textFilter__pb2.TextFindAllGrpcReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HtmlFilter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/HtmlFilter',
            textFilter__pb2.TextFindAllGrpcRequest.SerializeToString,
            textFilter__pb2.TextFindAllGrpcReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MarkdownFilter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/MarkdownFilter',
            textFilter__pb2.TextFindAllGrpcRequest.SerializeToString,
            textFilter__pb2.TextFindAllGrpcReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TextReplace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/TextReplace',
            textFilter__pb2.TextReplaceGrpcRequest.SerializeToString,
            textFilter__pb2.TextReplaceGrpcReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JsonReplace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/JsonReplace',
            textFilter__pb2.TextReplaceGrpcRequest.SerializeToString,
            textFilter__pb2.TextReplaceGrpcReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HtmlReplace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/HtmlReplace',
            textFilter__pb2.TextReplaceGrpcRequest.SerializeToString,
            textFilter__pb2.TextReplaceGrpcReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MarkdownReplace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/MarkdownReplace',
            textFilter__pb2.TextReplaceGrpcRequest.SerializeToString,
            textFilter__pb2.TextReplaceGrpcReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TextFilterAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/TextFilterAsync',
            textFilter__pb2.TextFindAllAsyncGrpcRequest.SerializeToString,
            textFilter__pb2.TextFilterRequestIdGrpcReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JsonFilterAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/JsonFilterAsync',
            textFilter__pb2.TextFindAllAsyncGrpcRequest.SerializeToString,
            textFilter__pb2.TextFilterRequestIdGrpcReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HtmlFilterAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/HtmlFilterAsync',
            textFilter__pb2.TextFindAllAsyncGrpcRequest.SerializeToString,
            textFilter__pb2.TextFilterRequestIdGrpcReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MarkdownFilterAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/MarkdownFilterAsync',
            textFilter__pb2.TextFindAllAsyncGrpcRequest.SerializeToString,
            textFilter__pb2.TextFilterRequestIdGrpcReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TextReplaceAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/TextReplaceAsync',
            textFilter__pb2.TextReplaceAsyncGrpcRequest.SerializeToString,
            textFilter__pb2.TextFilterRequestIdGrpcReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JsonReplaceAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/JsonReplaceAsync',
            textFilter__pb2.TextReplaceAsyncGrpcRequest.SerializeToString,
            textFilter__pb2.TextFilterRequestIdGrpcReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HtmlReplaceAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/HtmlReplaceAsync',
            textFilter__pb2.TextReplaceAsyncGrpcRequest.SerializeToString,
            textFilter__pb2.TextFilterRequestIdGrpcReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MarkdownReplaceAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/toolgood.textfilter.api.GrpcBase.TextFilterGrpc/MarkdownReplaceAsync',
            textFilter__pb2.TextReplaceAsyncGrpcRequest.SerializeToString,
            textFilter__pb2.TextFilterRequestIdGrpcReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
